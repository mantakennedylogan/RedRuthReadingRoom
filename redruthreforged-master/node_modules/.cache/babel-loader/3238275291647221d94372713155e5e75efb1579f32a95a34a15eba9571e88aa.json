{"ast":null,"code":"var _jsxFileName = \"C:\\\\csSchoolWork\\\\RedRuthReadingRoom\\\\redruthreforged-master\\\\src\\\\Context\\\\AdminContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminContext = /*#__PURE__*/createContext({});\nexport const AdminProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // Collections\n  const [collections, setCollections] = useState([]);\n  const [currentCollection, setCurrentCollection] = useState({\n    collection_id: null,\n    title: null\n  });\n  const updateCurrCollection = (collection_id, title) => {\n    let collection = {\n      collection_id: collection_id,\n      title: title\n    };\n    setCurrentCollection(collection);\n  };\n\n  // Prompts\n  const [promptID, setPromptID] = useState(-1);\n\n  // Responses\n  const [currentResponse, setCurrentResponse] = useState({\n    file_id: null,\n    prompt: null,\n    name: null,\n    email: null,\n    phone_num: null,\n    postal_code: null,\n    title: null,\n    remarks: null,\n    timestamp: null,\n    file_length: null\n  });\n  const updateCurrResponse = recordinginfo => {\n    setCurrentResponse(recordinginfo);\n  };\n  const clearCurrResponse = () => {\n    setCurrentResponse({\n      file_id: null,\n      prompt: null,\n      name: null,\n      email: null,\n      phone_num: null,\n      postal_code: null,\n      title: null,\n      remarks: null,\n      timestamp: null,\n      file_length: null\n    });\n  };\n  // View\n  const [currentView, setCurrentView] = useState('home');\n\n  // Authentication. THIS SHOULD BE HANDLED IN COOKIES OR SOMETHING, AS WE LOSE AUTHENTICATION ON REFRESH!\n  // This is where the user_id is set. Site currently only handles 1 user with ID of 12345.\n  const [userID, setUserID] = useState(12345);\n  return /*#__PURE__*/_jsxDEV(AdminContext.Provider, {\n    value: {\n      collections,\n      setCollections,\n      currentCollection,\n      setCurrentCollection,\n      updateCurrCollection,\n      promptID,\n      setPromptID,\n      currentResponse,\n      setCurrentResponse,\n      updateCurrResponse,\n      clearCurrResponse,\n      userID,\n      setUserID,\n      currentView,\n      setCurrentView\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminProvider, \"OQHMCDWChu5eW8HRobqt/RphKkE=\");\n_c = AdminProvider;\nexport default AdminContext;\nvar _c;\n$RefreshReg$(_c, \"AdminProvider\");","map":{"version":3,"names":["React","createContext","useState","AdminContext","AdminProvider","children","collections","setCollections","currentCollection","setCurrentCollection","collection_id","title","updateCurrCollection","collection","promptID","setPromptID","currentResponse","setCurrentResponse","file_id","prompt","name","email","phone_num","postal_code","remarks","timestamp","file_length","updateCurrResponse","recordinginfo","clearCurrResponse","currentView","setCurrentView","userID","setUserID"],"sources":["C:/csSchoolWork/RedRuthReadingRoom/redruthreforged-master/src/Context/AdminContext.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nconst AdminContext = createContext({});\r\n\r\nexport const AdminProvider = ({ children }) => {\r\n    // Collections\r\n    const [collections, setCollections] = useState([]);\r\n    const [currentCollection, setCurrentCollection] = useState({\r\n        collection_id: null,\r\n        title: null\r\n    });\r\n    const updateCurrCollection = (collection_id, title) => {\r\n        let collection = {\r\n            collection_id: collection_id,\r\n            title: title\r\n        }\r\n        setCurrentCollection(collection)\r\n    }\r\n\r\n    // Prompts\r\n    const [promptID, setPromptID] = useState(-1);\r\n\r\n    // Responses\r\n    const [currentResponse, setCurrentResponse] = useState({\r\n        file_id: null,\r\n        prompt: null,\r\n        name: null,\r\n        email: null,\r\n        phone_num: null,\r\n        postal_code: null,\r\n        title: null,\r\n        remarks: null,\r\n        timestamp: null,\r\n        file_length: null,\r\n    });\r\n    const updateCurrResponse = (recordinginfo) => {\r\n        setCurrentResponse(recordinginfo)\r\n    }\r\n    const clearCurrResponse = () => {\r\n        setCurrentResponse({\r\n            file_id: null,\r\n            prompt: null,\r\n            name: null,\r\n            email: null,\r\n            phone_num: null,\r\n            postal_code: null,\r\n            title: null,\r\n            remarks: null,\r\n            timestamp: null,\r\n            file_length: null,\r\n        })\r\n    }\r\n    // View\r\n    const [currentView, setCurrentView] = useState('home')\r\n\r\n    // Authentication. THIS SHOULD BE HANDLED IN COOKIES OR SOMETHING, AS WE LOSE AUTHENTICATION ON REFRESH!\r\n    // This is where the user_id is set. Site currently only handles 1 user with ID of 12345.\r\n    const [userID, setUserID] = useState(12345);\r\n\r\n    return (\r\n        <AdminContext.Provider value={{\r\n            collections, setCollections,\r\n            currentCollection, setCurrentCollection,\r\n            updateCurrCollection,\r\n            promptID, setPromptID,\r\n            currentResponse, setCurrentResponse,\r\n            updateCurrResponse, clearCurrResponse,\r\n            userID, setUserID,\r\n            currentView, setCurrentView\r\n        }}>\r\n\r\n            {children}\r\n\r\n        </AdminContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AdminContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAEvD,MAAMC,YAAY,gBAAGF,aAAa,CAAC,CAAC,CAAC,CAAC;AAEtC,OAAO,MAAMG,aAAa,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACtC;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACM,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGP,QAAQ,CAAC;IACvDQ,aAAa,EAAE,IAAI;IACnBC,KAAK,EAAE;EACX,CAAC,CAAC;EACF,MAAMC,oBAAoB,GAAG,CAACF,aAAa,EAAEC,KAAK,KAAK;IACnD,IAAIE,UAAU,GAAG;MACbH,aAAa,EAAEA,aAAa;MAC5BC,KAAK,EAAEA;IACX,CAAC;IACDF,oBAAoB,CAACI,UAAU,CAAC;EACpC,CAAC;;EAED;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE5C;EACA,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC;IACnDgB,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,IAAI;IACZC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,IAAI;IACXC,SAAS,EAAE,IAAI;IACfC,WAAW,EAAE,IAAI;IACjBZ,KAAK,EAAE,IAAI;IACXa,OAAO,EAAE,IAAI;IACbC,SAAS,EAAE,IAAI;IACfC,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,MAAMC,kBAAkB,GAAIC,aAAa,IAAK;IAC1CX,kBAAkB,CAACW,aAAa,CAAC;EACrC,CAAC;EACD,MAAMC,iBAAiB,GAAG,MAAM;IAC5BZ,kBAAkB,CAAC;MACfC,OAAO,EAAE,IAAI;MACbC,MAAM,EAAE,IAAI;MACZC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE,IAAI;MACjBZ,KAAK,EAAE,IAAI;MACXa,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE;IACjB,CAAC,CAAC;EACN,CAAC;EACD;EACA,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,MAAM,CAAC;;EAEtD;EACA;EACA,MAAM,CAAC8B,MAAM,EAAEC,SAAS,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EAE3C,oBACI,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAC1BI,WAAW;MAAEC,cAAc;MAC3BC,iBAAiB;MAAEC,oBAAoB;MACvCG,oBAAoB;MACpBE,QAAQ;MAAEC,WAAW;MACrBC,eAAe;MAAEC,kBAAkB;MACnCU,kBAAkB;MAAEE,iBAAiB;MACrCG,MAAM;MAAEC,SAAS;MACjBH,WAAW;MAAEC;IACjB,CAAE;IAAA,UAEG1B;EAAQ;IAAA;IAAA;IAAA;EAAA,QAEW;AAEhC,CAAC;AAAA,GAvEYD,aAAa;AAAA,KAAbA,aAAa;AAyE1B,eAAeD,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}