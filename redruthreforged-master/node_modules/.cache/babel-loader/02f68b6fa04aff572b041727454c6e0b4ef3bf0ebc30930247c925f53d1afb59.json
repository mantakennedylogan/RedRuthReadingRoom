{"ast":null,"code":"var _jsxFileName = \"C:\\\\csSchoolWork\\\\RedRuthReadingRoom\\\\redruthreforged-master\\\\src\\\\Components\\\\Admin\\\\Buttons\\\\SidebarButton.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport HomeIcon from '@mui/icons-material/Home';\nimport MailIcon from '@mui/icons-material/Mail';\nimport EditIcon from '@mui/icons-material/Edit';\nimport PublishIcon from '@mui/icons-material/Publish';\nimport { Button } from '@mui/material';\nimport { useContext } from 'react';\nimport AdminContext from '../../../Context/AdminContext';\n\n// This component returns a button for the admin page sidebar. Style depends on button type, provided in props.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SidebarButton(props) {\n  _s();\n  const {\n    currentView,\n    setCurrentView\n  } = useContext(AdminContext);\n  let buttonProps;\n\n  // Styling\n  let buttonStyle = {\n    borderRadius: '0',\n    width: '100%',\n    height: '80px',\n    backgroundColor: '#323f54',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: 'white',\n      color: '#323f54'\n    }\n  };\n  let selectedButtonStyle = {\n    // only difference is non-hover backgroundcolor and color\n    borderRadius: '0',\n    width: '100%',\n    height: '80px',\n    backgroundColor: 'white',\n    color: '#323f54',\n    '&:hover': {\n      backgroundColor: 'white',\n      color: '#323f54'\n    }\n  };\n\n  // Logic to determine button behavior and icon\n  switch (props.type) {\n    case 'home':\n      buttonProps = {\n        icon: /*#__PURE__*/_jsxDEV(HomeIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 23\n        }, this),\n        onclick: () => setCurrentView('home')\n      };\n      break;\n    case 'inbox':\n      buttonProps = {\n        icon: /*#__PURE__*/_jsxDEV(MailIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 23\n        }, this),\n        onclick: () => setCurrentView('inbox')\n      };\n      break;\n    case 'edit':\n      buttonProps = {\n        icon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 23\n        }, this),\n        onclick: () => setCurrentView('edit')\n      };\n      break;\n    case 'publish':\n      buttonProps = {\n        icon: /*#__PURE__*/_jsxDEV(PublishIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 23\n        }, this),\n        onclick: () => setCurrentView('publish')\n      };\n      break;\n    default:\n      break;\n  }\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: buttonProps.onclick,\n    sx: props.type === currentView ? selectedButtonStyle : buttonStyle,\n    children: buttonProps.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(SidebarButton, \"ppQwp215HYzt/lTVCWXw96GScFo=\");\n_c = SidebarButton;\nexport default SidebarButton;\nvar _c;\n$RefreshReg$(_c, \"SidebarButton\");","map":{"version":3,"names":["React","useEffect","HomeIcon","MailIcon","EditIcon","PublishIcon","Button","useContext","AdminContext","SidebarButton","props","currentView","setCurrentView","buttonProps","buttonStyle","borderRadius","width","height","backgroundColor","color","selectedButtonStyle","type","icon","onclick"],"sources":["C:/csSchoolWork/RedRuthReadingRoom/redruthreforged-master/src/Components/Admin/Buttons/SidebarButton.jsx"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport MailIcon from '@mui/icons-material/Mail';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport PublishIcon from '@mui/icons-material/Publish';\r\nimport { Button } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport AdminContext from '../../../Context/AdminContext';\r\n\r\n// This component returns a button for the admin page sidebar. Style depends on button type, provided in props.\r\n\r\nfunction SidebarButton(props) {\r\n    const { currentView, setCurrentView } = useContext(AdminContext);\r\n    let buttonProps;\r\n\r\n    // Styling\r\n    let buttonStyle = {\r\n        borderRadius: '0',\r\n        width: '100%',\r\n        height: '80px',\r\n        backgroundColor: '#323f54',\r\n        color: 'white',\r\n        '&:hover': {\r\n            backgroundColor: 'white',\r\n            color: '#323f54',\r\n        }\r\n    }\r\n\r\n    let selectedButtonStyle = { // only difference is non-hover backgroundcolor and color\r\n        borderRadius: '0',\r\n        width: '100%',\r\n        height: '80px',\r\n        backgroundColor: 'white',\r\n        color: '#323f54',\r\n        '&:hover': {\r\n            backgroundColor: 'white',\r\n            color: '#323f54',\r\n        }\r\n    }\r\n\r\n    // Logic to determine button behavior and icon\r\n    switch (props.type) {\r\n        case 'home':\r\n            buttonProps = {\r\n                icon: <HomeIcon />,\r\n                onclick: () => setCurrentView('home')\r\n            }\r\n            break;\r\n\r\n        case 'inbox':\r\n            buttonProps = {\r\n                icon: <MailIcon />,\r\n                onclick: () => setCurrentView('inbox')\r\n            }\r\n            break;\r\n\r\n        case 'edit':\r\n            buttonProps = {\r\n                icon: <EditIcon />,\r\n                onclick: () => setCurrentView('edit')\r\n            }\r\n            break;\r\n\r\n        case 'publish':\r\n            buttonProps = {\r\n                icon: <PublishIcon />,\r\n                onclick: () => setCurrentView('publish')\r\n            }\r\n            break;\r\n        \r\n        default:\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <Button onClick={buttonProps.onclick} sx={props.type === currentView ? selectedButtonStyle : buttonStyle}>\r\n            {buttonProps.icon}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default SidebarButton"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,WAAW,MAAM,6BAA6B;AACrD,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,YAAY,MAAM,+BAA+B;;AAExD;AAAA;AAEA,SAASC,aAAa,CAACC,KAAK,EAAE;EAAA;EAC1B,MAAM;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGL,UAAU,CAACC,YAAY,CAAC;EAChE,IAAIK,WAAW;;EAEf;EACA,IAAIC,WAAW,GAAG;IACdC,YAAY,EAAE,GAAG;IACjBC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,MAAM;IACdC,eAAe,EAAE,SAAS;IAC1BC,KAAK,EAAE,OAAO;IACd,SAAS,EAAE;MACPD,eAAe,EAAE,OAAO;MACxBC,KAAK,EAAE;IACX;EACJ,CAAC;EAED,IAAIC,mBAAmB,GAAG;IAAE;IACxBL,YAAY,EAAE,GAAG;IACjBC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,MAAM;IACdC,eAAe,EAAE,OAAO;IACxBC,KAAK,EAAE,SAAS;IAChB,SAAS,EAAE;MACPD,eAAe,EAAE,OAAO;MACxBC,KAAK,EAAE;IACX;EACJ,CAAC;;EAED;EACA,QAAQT,KAAK,CAACW,IAAI;IACd,KAAK,MAAM;MACPR,WAAW,GAAG;QACVS,IAAI,eAAE,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG;QAClBC,OAAO,EAAE,MAAMX,cAAc,CAAC,MAAM;MACxC,CAAC;MACD;IAEJ,KAAK,OAAO;MACRC,WAAW,GAAG;QACVS,IAAI,eAAE,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG;QAClBC,OAAO,EAAE,MAAMX,cAAc,CAAC,OAAO;MACzC,CAAC;MACD;IAEJ,KAAK,MAAM;MACPC,WAAW,GAAG;QACVS,IAAI,eAAE,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG;QAClBC,OAAO,EAAE,MAAMX,cAAc,CAAC,MAAM;MACxC,CAAC;MACD;IAEJ,KAAK,SAAS;MACVC,WAAW,GAAG;QACVS,IAAI,eAAE,QAAC,WAAW;UAAA;UAAA;UAAA;QAAA,QAAG;QACrBC,OAAO,EAAE,MAAMX,cAAc,CAAC,SAAS;MAC3C,CAAC;MACD;IAEJ;MACI;EAAM;EAGd,oBACI,QAAC,MAAM;IAAC,OAAO,EAAEC,WAAW,CAACU,OAAQ;IAAC,EAAE,EAAEb,KAAK,CAACW,IAAI,KAAKV,WAAW,GAAGS,mBAAmB,GAAGN,WAAY;IAAA,UACpGD,WAAW,CAACS;EAAI;IAAA;IAAA;IAAA;EAAA,QACZ;AAEjB;AAAC,GApEQb,aAAa;AAAA,KAAbA,aAAa;AAsEtB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}