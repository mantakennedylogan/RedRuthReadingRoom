{"ast":null,"code":"var _jsxFileName = \"C:\\\\csSchoolWork\\\\RedRuthReadingRoom\\\\redruthreforged-master\\\\src\\\\Components\\\\Record\\\\Record.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from '../../API/axios';\nimport RecordingBox from './RecordingBox/RecordingBox';\n\n// TODO: Set \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Record() {\n  _s();\n  const [prompt, setPrompt] = useState('');\n  const [desc, setDesc] = useState('');\n  const [promptID, setPromptID] = useState('');\n  const [validatedPrompt, setValidatedPrompt] = useState(false);\n  const {\n    prompt_id_url\n  } = useParams();\n\n  //const [prompt_id_url, set_prompt_id_url] = useState(666);\n\n  console.log(\"prompt id: \" + prompt_id_url);\n  // useParams();\n\n  // Call database for prompt associated with promptid in queryParameters.\n  useEffect(() => {\n    if (Number.isInteger(Number(prompt_id_url)) && prompt_id_url !== null && !validatedPrompt) {\n      console.log(\"before axios try block\");\n      try {\n        console.log(\"inside try block\");\n        axios.get('/api/getprompt?prompt_id=' + prompt_id_url).then(response => {\n          console.log(\"inside axios block\");\n          if (response.data !== '') {\n            console.log(\"inside if statement block\");\n            setValidatedPrompt(true);\n            setPromptID(response.data.prompt_id);\n            setPrompt(response.data.prompt);\n            setDesc(response.data.description);\n          }\n          console.log(\"after if statement\");\n        });\n      } catch (e) {\n        console.log(\"Axios fail :(\");\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recordpage\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), validatedPrompt ? /*#__PURE__*/_jsxDEV(RecordingBox, {\n      prompt: prompt,\n      desc: desc,\n      promptid: promptID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to the record page! Since you didn't put a promptid in your url (or it's not valid for whatever reason), here are some instructions on how to record.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Contact your researcher and get the direct prompt link from them.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Review the prompt on the screen before beginning recording.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click the large record button to begin recording. NOTE, you may have to grant permissions for your web browser to access your microphone.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"INSTRUCTIONS IMAGE HERE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Once you're done recording, click the large record button to stop recording. If the timer runs out, the recording will stop automatically.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Enter the required information (denoted with an asterisk), then optionally fill out the remaining fields. The optional information will likely help the researcher.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Hit submit and you're done!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(Record, \"aqbVwrGWK5S4M9iXPsV0R6oDn/M=\", false, function () {\n  return [useParams];\n});\n_c = Record;\nexport default Record;\nvar _c;\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","RecordingBox","Record","prompt","setPrompt","desc","setDesc","promptID","setPromptID","validatedPrompt","setValidatedPrompt","prompt_id_url","console","log","Number","isInteger","get","then","response","data","prompt_id","description","e"],"sources":["C:/csSchoolWork/RedRuthReadingRoom/redruthreforged-master/src/Components/Record/Record.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport axios from '../../API/axios';\nimport RecordingBox from './RecordingBox/RecordingBox';\n\n// TODO: Set \n\nfunction Record() {\n    const [prompt, setPrompt] = useState('');\n    const [desc, setDesc] = useState('');\n    const [promptID, setPromptID] = useState('');\n\n    const [validatedPrompt, setValidatedPrompt] = useState(false);\n    const { prompt_id_url } = useParams();\n\n    //const [prompt_id_url, set_prompt_id_url] = useState(666);\n\n    console.log(\"prompt id: \" + prompt_id_url);\n        // useParams();\n\n\n    // Call database for prompt associated with promptid in queryParameters.\n    useEffect(() => {\n        if (Number.isInteger(Number(prompt_id_url)) && prompt_id_url !== null && !validatedPrompt) {\n            console.log(\"before axios try block\");\n            try {\n                console.log(\"inside try block\");\n                axios.get('/api/getprompt?prompt_id=' + prompt_id_url).then((response) => {\n                    console.log(\"inside axios block\");\n                    if (response.data !== '') {\n                        console.log(\"inside if statement block\");\n                        setValidatedPrompt(true);\n                        setPromptID(response.data.prompt_id);\n                        setPrompt(response.data.prompt);\n                        setDesc(response.data.description);\n                    }\n                    console.log(\"after if statement\");\n                });\n            } catch (e) {\n                console.log(\"Axios fail :(\")\n            }\n        }\n    }, [])\n\n\n    return (\n        <div className='recordpage'>\n            <h1>Record</h1>\n            {validatedPrompt ?\n                <RecordingBox prompt={prompt} desc={desc} promptid={promptID}/>\n                :\n                <>\n                <p>Welcome to the record page! Since you didn't put a promptid in your url (or it's not valid for whatever reason), here are some instructions on how to record.</p>\n                <ol>\n                    <li>Contact your researcher and get the direct prompt link from them.</li>\n                    <li>Review the prompt on the screen before beginning recording.</li>\n                    <li>Click the large record button to begin recording. NOTE, you may have to grant permissions for your web browser to access your microphone.</li>\n                    <h3>INSTRUCTIONS IMAGE HERE</h3>\n                    <li>Once you're done recording, click the large record button to stop recording. If the timer runs out, the recording will stop automatically.</li>\n                    <li>Enter the required information (denoted with an asterisk), then optionally fill out the remaining fields. The optional information will likely help the researcher.</li>\n                    <li>Hit submit and you're done!</li>\n                </ol>\n                </>}\n        </div>\n    )\n}\n\nexport default Record"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}