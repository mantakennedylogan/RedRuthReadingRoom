{"ast":null,"code":"var _jsxFileName = \"C:\\\\csSchoolWork\\\\RedRuthReadingRoom\\\\redruthreforged-master\\\\src\\\\Components\\\\Account.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Pool from \"../UserPool\";\nimport axios from '../../src/API/axios';\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountContext = /*#__PURE__*/createContext();\nconst Account = props => {\n  _s();\n  const [status, setStatus] = useState(localStorage.getItem(\"state\"));\n  const navigate = useNavigate();\n  const [currentUser, setCurrentUser] = useState({});\n\n  // Returns information when user logs in, returns promise\n  const getSession = async () => {\n    return await new Promise((resolve, reject) => {\n      const user = Pool.getCurrentUser();\n      if (user) {\n        // if user does exist, grab session\n        user.getSession(async (err, session) => {\n          if (err) {\n            reject();\n          } else {\n            const attributes = await new Promise((resolve, reject) => {\n              user.getUserAttributes((err, attributes) => {\n                if (err) {\n                  reject(err);\n                } else {\n                  const results = {};\n                  for (let attribute of attributes) {\n                    const {\n                      Name,\n                      Value\n                    } = attributes;\n                    results[Name] = Value;\n                  }\n                  resolve(results);\n                }\n              });\n            });\n            resolve({\n              user,\n              ...session,\n              ...attributes\n            });\n          }\n        });\n      } else {\n        reject(); // if no user\n      }\n    });\n  };\n\n  // Authenticates and returns JWT token\n  const authenticate = async (Username, Password) => {\n    return await new Promise((resolve, reject) => {\n      const user = new CognitoUser({\n        Username,\n        Pool\n      });\n      const authDetails = new AuthenticationDetails({\n        Username,\n        Password\n      });\n      user.authenticateUser(authDetails, {\n        onSuccess: data => {\n          console.log(\"onSuccess: \", data);\n          resolve(data);\n\n          //get account ID and other information\n          axios.get('/api/account/getaccountdetails?username=' + user.Username).then(response => {\n            if (response.data !== '') {\n              // do something if the response.data is not empty, probably something like the following\n              // response.data should be an array, where the items in the array are the rows returned\n              setCurrentUser(response.data[0]);\n              console.log(currentUser.user_id);\n              console.log(currentUser.email);\n              console.log(currentUser.name);\n              console.log(currentUser.phone);\n              console.log(currentUser.postal);\n            }\n          });\n        },\n        onFailure: err => {\n          console.error(\"onFailure: \", err);\n          reject(err);\n        },\n        newPasswordRequired: data => {\n          console.log(\"newPasswordRequired: \", data);\n          resolve(data);\n        }\n      });\n    });\n  };\n\n  // Sign Out function\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n    if (user) {\n      user.signOut(); // cognito sign out method\n      setStatus(false);\n      localStorage.setItem(\"state\", 0);\n    }\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      setCurrentUser,\n      currentUser,\n      authenticate,\n      getSession,\n      logout,\n      status,\n      setStatus\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(Account, \"HXIFVw9vQfHjND32w8f31MeJDn0=\", false, function () {\n  return [useNavigate];\n});\n_c = Account;\nexport { Account, AccountContext };\nvar _c;\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","Pool","axios","CognitoUser","AuthenticationDetails","AccountContext","Account","props","status","setStatus","localStorage","getItem","navigate","currentUser","setCurrentUser","getSession","Promise","resolve","reject","user","getCurrentUser","err","session","attributes","getUserAttributes","results","attribute","Name","Value","authenticate","Username","Password","authDetails","authenticateUser","onSuccess","data","console","log","get","then","response","user_id","email","name","phone","postal","onFailure","error","newPasswordRequired","logout","signOut","setItem","children"],"sources":["C:/csSchoolWork/RedRuthReadingRoom/redruthreforged-master/src/Components/Account.js"],"sourcesContent":["import React, {createContext, useState, useEffect} from \"react\";\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport Pool from \"../UserPool\";\r\nimport axios from '../../src/API/axios'\r\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\r\n\r\nconst AccountContext = createContext();\r\n\r\nconst Account = (props) => {\r\n    const[status, setStatus] = useState(localStorage.getItem(\"state\"));\r\n    const navigate = useNavigate();\r\n    const[currentUser, setCurrentUser] = useState({});\r\n\r\n    // Returns information when user logs in, returns promise\r\n    const getSession = async () => {\r\n        return await new Promise((resolve, reject) => {\r\n            const user = Pool.getCurrentUser();\r\n            if(user) {\r\n                // if user does exist, grab session\r\n                user.getSession(async (err, session) => {\r\n                    if (err){\r\n                        reject();\r\n                    } else {\r\n                        const attributes = await new Promise((resolve, reject) => {\r\n                            user.getUserAttributes((err, attributes) => {\r\n                                if(err){\r\n                                    reject(err);\r\n                                }\r\n                                else{\r\n                                    const results = {};\r\n        \r\n                                    for (let attribute of attributes) {\r\n                                        const {Name, Value} = attributes;\r\n                                        results[Name] = Value;\r\n                                    }\r\n                                    resolve(results);\r\n                                }\r\n                            });\r\n                        });\r\n                        resolve({user, ...session, ...attributes});\r\n                    }\r\n                });\r\n            } else {\r\n                reject(); // if no user\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    // Authenticates and returns JWT token\r\n    const authenticate = async (Username, Password) => {\r\n       return await new Promise((resolve, reject) => {\r\n        const user = new CognitoUser({ Username, Pool});\r\n        \r\n        const authDetails = new AuthenticationDetails({ Username,Password });\r\n        user.authenticateUser(authDetails, {\r\n             onSuccess: (data) =>{\r\n                 console.log(\"onSuccess: \", data);\r\n                 resolve(data);\r\n\r\n                 //get account ID and other information\r\n                 axios.get('/api/account/getaccountdetails?username=' + user.Username).then((response) => {\r\n                    if (response.data !== '') {\r\n                      // do something if the response.data is not empty, probably something like the following\r\n                      // response.data should be an array, where the items in the array are the rows returned\r\n                      setCurrentUser(response.data[0]);\r\n                      console.log(currentUser.user_id);\r\n                      console.log(currentUser.email);\r\n                      console.log(currentUser.name);\r\n                      console.log(currentUser.phone);\r\n                      console.log(currentUser.postal); \r\n                    }\r\n                  });\r\n             },\r\n             onFailure: (err) =>{\r\n                 console.error(\"onFailure: \", err);\r\n                 reject(err);\r\n             },\r\n             newPasswordRequired: (data) =>{\r\n                 console.log(\"newPasswordRequired: \", data);\r\n                 resolve(data);\r\n             },\r\n        });\r\n       });\r\n    };\r\n    \r\n    // Sign Out function\r\n    const logout = () => {\r\n        const user = Pool.getCurrentUser();\r\n        if (user){\r\n            user.signOut(); // cognito sign out method\r\n            setStatus(false);\r\n            localStorage.setItem(\"state\", 0);\r\n        }\r\n        navigate(\"/\")\r\n    }\r\n\r\n    return(\r\n        <AccountContext.Provider value = {{ setCurrentUser, currentUser, authenticate, getSession, logout, status, setStatus }}>\r\n         {props.children}\r\n        </AccountContext.Provider>\r\n    );\r\n};\r\n\r\nexport { Account, AccountContext };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}